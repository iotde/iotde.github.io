{"version":3,"sources":["webpack:///../components/number/SliderControl.tsx","webpack:///../components/number/IOTNoPoleSlider/demo/1-demo-basic.tsx","webpack:///../components/number/IOTNoPoleSlider/index.mdx","webpack:///../components/number/IOTNoPoleSlider/demo/1-demo-basic.tsx?3c0f","webpack:///../components/number/IOTNoPoleSlider/fatSlider/fatSlider.tsx","webpack:///../components/number/IOTNoPoleSlider/IOTNoPoleSlider.tsx","webpack:///../components/number/sliderConfig.tsx"],"names":["sliderWidth","sliderOffsetLeft","startX","startY","isTouched","isHorizontalMoved","SliderControl","start","processHanlder","onchange","currentVal","refProgess","onTouchStart","useCallback","e","doms","current","parseFloat","getBoundingClientRect","width","left","touchs","changedTouches","pageX","pageY","onTouchMove","currentX","currentY","diffX","Math","abs","diffY","onTouchEnd","onTouchCancel","props","type","streamId","title","icon","show","value","min","max","step","unitdesc","curValue","unit","disabled","startHandler","val","endHandler","streamName","IOTNoPoleSlider","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","code","desc","isMDXComponent","Slider","leftIcon","rightIcon","barStyle","dotsData","move","isStep","showHandleBtn","useState","progress","setProgress","setCurrentVal","useRef","useEffect","Number","processPercent","JSON","stringify","currentStepInd","entries","index","elem","text","dotInfoList","setProcessPercent","currentValue","parseInt","toString","oneStepPercent","length","currentStep","round","SliderChildern","processVal","changVal","className","prefixCls","onClick","ref","style","subTitle","rest","displayValue","setDisplayValue","join","marginLeft","dataSource","display","num","minTemp","maxTemp","stepTemp","dataList","lastStep","i","push","aInfoList","dotsLength","aInfo","pos"],"mappings":"8FAAA,IAEIA,EACAC,EAEAC,EACAC,EACAC,EACAC,EARJ,YA6BMC,EAAgB,SAAC,GAMJ,IALjBC,EAKiB,EALjBA,MACAC,EAIiB,EAJjBA,eACAC,EAGiB,EAHjBA,SACAC,EAEiB,EAFjBA,WACAC,EACiB,EADjBA,WAGMC,EAAwDC,uBAC5D,SAACC,GACC,IAAMC,EAAYJ,EAAWK,QAC7BhB,EAAciB,WAAWF,EAAKG,wBAAwBC,OACtDlB,EAAmBgB,WAAWF,EAAKG,wBAAwBE,MAC3D,IAAMC,EAASP,EAAEQ,eAAe,GAChCpB,EAASmB,EAAOE,MAChBpB,EAASkB,EAAOG,MAChBpB,GAAY,EACZC,GAAoB,EACpBE,MAEF,CAACA,IAGGkB,EAAuDZ,uBAC3D,SAACC,GACC,IAAMO,EAASP,EAAEQ,eAAe,GAC1BI,EAAWL,EAAOE,MAClBI,EAAWN,EAAOG,MAClBI,EAAQC,KAAKC,IAAIJ,EAAWxB,GAC5B6B,EAAQF,KAAKC,IAAIH,EAAWxB,GAG9BC,IACU,GAARwB,EAAcG,IAChB1B,GAAoB,GAEtBD,GAAY,GAOVC,GACFG,GAJEkB,EAAWzB,GAAoBD,EAAe,OAOpD,CAACQ,IAGGwB,EAAanB,uBAAY,WACzBR,GACFI,EAASC,KAIV,CAACA,EAAYD,IAEhB,MAAO,CACLG,aAAc,SAACE,GAAD,OAAYF,EAAaE,IACvCW,YAAa,SAACX,GAAD,OAAYW,EAAYX,IACrCkB,WAAY,kBAAMA,KAClBC,cAAe,kBAAMD,OAKV1B,W,ybC5FT4B,EAA8B,CAClCC,KAAM,SACNC,SAAU,OACVC,MAAO,OACPC,KAAM,CACJC,MAAM,EACNC,MAAO,mBAETC,IAAK,IACLC,IAAK,KACLC,KAAM,IACNC,SAAU,GACVC,SAAU,IACVC,KAAM,IACNC,UAAU,EACVC,aAAc,SAACC,KACfC,WAAY,aACZC,WAAY,IAEC,oBAAM,YAACC,EAAA,EAAoBlB,ICZ7BmB,EAAe,Q,6NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGxB,EACF,8BACD,OAAO,YAACqB,EAAD,eAAeD,EAAiBpB,EAAhC,CAAuCwB,WAAYA,EAAYC,QAAQ,cAK5E,kBACE,GAAM,oBADR,oBAGA,+BACA,kBACE,GAAM,QADR,QAGA,kBACE,GAAM,QADR,QAGA,YAAC,IAAD,CAASC,KCnCE,kiBDmCmBvB,MAAM,OAAOwB,KAAK,kBAAkBF,QAAQ,WAC5E,YAAC,EAAD,CAAWA,QAAQ,qB,2NAMrBF,EAAWK,gBAAiB,G,q9BEf5B,IAAMC,EAAS,SAAC,GAeG,QAdjBC,gBAciB,MAdN,oBAcM,MAbjBC,iBAaiB,MAbL,kBAaK,MAZjBC,gBAYiB,MAZN,MAYM,EAXjBrB,EAWiB,EAXjBA,SACAJ,EAUiB,EAVjBA,IACAC,EASiB,EATjBA,IACAK,EAQiB,EARjBA,SACAtC,EAOiB,EAPjBA,SACA0D,EAMiB,EANjBA,SACAxB,EAKiB,EALjBA,KACApC,EAIiB,EAJjBA,MACA6D,EAGiB,EAHjBA,KAGiB,IAFjBC,cAEiB,aADjBC,qBACiB,WACeC,mBAAiB,IAA1CC,EADU,KACAC,EADA,OAGmBF,mBAAS,GAAtC7D,EAHU,KAGEgE,EAHF,KAKX/D,EAAagE,iBAAO,MAE1BC,qBAAU,WAER,QAAiB,IAAb/B,GACsB,iBAAbA,EAAuB,CAClC,GAAIgC,OAAO5D,WAAW4B,GAAYJ,EAGhC,OAFAiC,EAAcjC,QACdgC,EAAehC,EAAJ,KAEX,GAAIoC,OAAO5D,WAAW4B,GAAYH,EAGlC,OAFAgC,EAAchC,QACd+B,EAAe/B,EAAJ,KAGb,IAAMoC,GAAkBD,OAAO5D,WAAW4B,GAAYJ,IAAQ,KAAOC,EAAMD,IAC3EgC,EAAeK,EAAJ,QAGZ,CAACjC,EAAUJ,EAAKC,IAInBkC,qBAAU,WACR,IAAIP,EAAJ,CAMA,KAFSxB,IAAanC,GAIpB,GAAI2D,EAAQ,CACV,GAAIxB,EAAWJ,EAEb,YADAiC,EAAcjC,GAEd,GAAII,EAAWH,EAEf,YADAgC,EAAchC,GAGhB+B,EAAYM,KAAKC,UAAuC,KAAOtC,EAAMD,IAAxCI,EAAmBJ,SAC3C,CAEL,IAFK,MAEL,EADIwC,EAAiB,EACrB,IAA6Bd,EAAUe,aAAvC,aAAkD,eAAtCC,EAAsC,KAA/BC,EAA+B,KAC3CvC,IAAqBkC,KAAKC,UAAUI,EAAKC,QAC5CJ,EAAiBE,GAGrBV,GAAW,UAAIa,YAAYnB,GAAUc,UAA1B,aAAI,EAAuC7D,MAA3C,SAGd,CAACyB,EAAUJ,EAAKC,EAAKwB,EAAUG,EAAQ3D,EAAYyD,IAEtD,IAAMoB,EAAoB1E,uBACxB,SAACiE,GACC,IAAIU,EAAuB,EAC3B,GAAInB,EAAQ,CAEV,GAAIS,GAAkB,EACpBA,EAAiB,EACjBU,EAAe/C,OACV,GAAIqC,GAAkB,IAC3BA,EAAiB,IACjBU,EAAe9C,MACV,CAEL8C,EAAeC,WATS/C,EAAMD,GAQCqC,EAAkB,IAAMrC,GAC7BiD,WAAY,SAGrC,OAEGC,EAAiB,KAAOxB,EAASyB,OAAS,GAE5CC,EAAchE,KAAKiE,MAAMhB,EAAiBa,GAAkB,EAC5DE,EAAc,IAChBA,EAAc,GAEZA,EAAc1B,EAASyB,SACzBC,EAAc1B,EAASyB,QAEzBd,EAAc,UAAGQ,YAAYnB,GAAU0B,EAAc,UAAvC,aAAG,EAAwCzE,KACzDoE,EAAerB,EAAS0B,EAAc,GAAGR,KAE3CjB,EAAKoB,GAELd,EAAcc,GACdf,EAAeK,EAAJ,OAEb,CAACX,EAAUE,EAAQ3B,EAAKD,EAAK2B,IAGzB2B,EAAiBzF,YAAc,CACnCC,MAAO,WAAQA,KACfC,eAAgB,SAACwF,GAAsBT,EAAkBS,IACzDvF,SAAU,SAACwF,GAAoBxF,EAASwF,IACxCvF,aACAC,eAIF,OACE,mBAAKuF,UAAcC,oBAChB7B,EACC,mBACE4B,UAAS,kBAAoBlC,EAC7BoC,QAAS,WACP,IAAIrD,EAAJ,CACA,IAAMP,EAAQqC,OAAOhC,GAAYF,EAAOF,EAAMA,EAAMoC,OAAOhC,GAAYF,EACvElC,EAAS+B,OAGX,KACJ,mBAAK0D,UAAS,yBAA2BhC,GACvC,mBAAKgC,UAAU,mBAAmBG,IAAK1F,IACvC,mBAAKuF,UAAU,WAAWI,MAAO,CAAEnF,MAAOqD,IACxC,+BACE0B,UAAU,QACNH,MAOTzB,EACC,mBACE4B,UAAS,mBAAqBjC,EAC9BmC,QAAS,WACP,IAAIrD,EAAJ,CACA,IAAMP,EAAQqC,OAAOhC,GAAYF,EAAOD,EAAMA,EAAMmC,OAAOhC,GAAYF,EACvElC,EAAS+B,OAGX,KAEHO,GAAY,mBAAKmD,UAAU,eAKnBnC,S,mPClLTX,EAAkD,SAAC,GAkBnD,IAjBJhB,EAiBI,EAjBJA,SAEAC,GAeI,EAhBJc,WAgBI,EAfJd,OAEAC,GAaI,EAdJiE,SAcI,EAbJjE,MACAG,EAYI,EAZJA,IACAC,EAWI,EAXJA,IACAC,EAUI,EAVJA,KAUI,IATJI,gBASI,SANJF,GAMI,EARJC,KAQI,EAPJF,SAOI,EANJC,UAMI,KALJmB,SAKI,EAJJC,UAII,EAHJjB,qBAGI,MAHW,SAACC,KAGZ,MAFJC,kBAEI,MAFS,SAACD,KAEV,EADDuD,EACC,mLACoCjC,mBAAiB,IAAlDkC,EADH,KACiBC,EADjB,KAQJ,OALA9B,qBAAU,WACR8B,EAAgB7D,KAEf,CAACA,IAGF,+BAAKqD,UA5BS,yBA4BiBM,GAC7B,mBAAKN,UAAU,mBACb,mBAAKA,UAAU,uBACb,mBAAKA,UAAU,yBAEX5D,aAAA,EAAAA,EAAMC,OACJ,mBAAK2D,UAAU,wBACb,oBAAMA,UAAW,CAAC,6BAA8B5D,WAAME,MAAQF,EAAKE,MAAQ,mBAAmBmE,KAAK,QAIzG,mBAAKT,UAAU,wBAAwBI,MAAO,CAAEM,WAAYtE,WAAMC,KAAO,IAAM,UAC7E,mBAAK2D,UAAU,wBAAyB7D,IAE1C,mBAAK6D,UAAU,SACf,mBAAKA,UAAU,cAAcO,KAGjC,mBAAKP,UAAU,0BACb,mBAAKA,UAAU,YAAYzD,GAC3B,YAAC,EAAD,CACEA,IAAKoC,OAAOY,SAAShD,GACrBC,IAAKmC,OAAOY,SAAS/C,GACrBC,KAAMkC,OAAOY,SAAS9C,GACtB2B,eAAe,EACfD,OAAoC,IAA5BQ,OAAO5D,WAAW0B,IAAed,KAAKiE,OAAOjB,OAAO5D,WAAWyB,GAAOmC,OAAO5D,WAAWwB,IAAQoC,OAAO5D,WAAW0B,IAAQ,GAClIE,SAAU4D,EACVtC,SAAU0C,YAAWpE,EAAKC,EAAKC,GAC/BI,UAAU,EACVtC,SAAU,SAACwC,GAKTC,EAJa,CACXd,WACAI,MAAOS,KAIXmB,KAAM,SAACnB,GACLyD,EAAgBzD,IAElB1C,MAAO,WACLyC,EAAa,YAGjB,mBAAKkD,UAAU,YAAYxD,IAE7B,mBAAKwD,UAAU,kBAAkBI,MAAO,CAAEQ,QAAY/D,EAAW,QAAU,aAMpEK,W,i8BCvFR,IAAMyD,EAAa,SAACpE,EAAaC,EAAaC,GAcnD,IAbA,IAIIoE,EAJEC,EAAkBnC,OAAO5D,WAAWwB,GACpCwE,EAAkBpC,OAAO5D,WAAWyB,GACpCwE,EAAmBrC,OAAO5D,WAAW0B,GAIrCwE,EAAgB,GAKhBC,EAAWH,IAJjBF,EAAMlF,KAAKiE,OAAOmB,EAAUD,GAAWE,IAILA,EAAWF,GAEpCK,EAAI,EAAGA,GAAKD,EAAW,EAAIL,EAAMA,EAAM,GAAIM,IAClDF,EAASG,KAAK,CACZ9E,MAAO6E,EAAI,EAEXhC,MAAmB,GAAX6B,EAAiBG,EAAc,GAAVL,GAAgB,KAWjD,OAPiB,IAAbI,GACFD,EAASG,KAAK,CACZ9E,MAAO2E,EAASvB,OAAS,EACzBP,KAAM4B,IAIHE,Q,kNAIF,IAAM7B,EAAc,SAACnB,GAC1B,IAAMoD,EAAY,GACZC,EAAarD,EAASyB,OAC5B,GAAI4B,EAAa,EAEf,IADA,IAAM7B,EAAiB,KAAO6B,EAAa,GAClCH,EAAI,EAAGA,EAAIG,EAAYH,GAAK,EAAG,CACtC,IAAII,EAAa,CACfnF,KAAM,IAMR,KAJkB6B,EAASkD,GAAG/E,OAE5BmF,EAAQ,EAAH,KAAQA,GAAR,IAAenF,KAAM6B,EAASkD,GAAG/E,QAEpC+E,IAAOG,EAAa,EACtBC,EAAQ,EAAH,KAAQA,GAAR,IAAerG,KAAM,UACrB,CACL,IAAMsG,EAAM/B,EAAiB0B,EAC7BI,EAAQ,EAAH,KAAQA,GAAR,IAAerG,KAAMsG,IAE5BD,EAAQ,EAAH,KAAQA,GAAR,IAAepC,KAAMlB,EAASkD,GAAGhC,KACpC7C,MAAO2B,EAASkD,GAAG7E,QACrB+E,EAAUD,KAAKG,GAGnB,OAAOF,Q","file":"component---components-number-iot-no-pole-slider-index-mdx-891da166f89a83ae7c35.js","sourcesContent":["import { useCallback } from \"react\";\n\nlet sliderWidth: number;\nlet sliderOffsetLeft: number;\n// let touchs: any;\nlet startX: number;\nlet startY: number;\nlet isTouched: boolean;\nlet isHorizontalMoved: boolean;\n\n\ninterface SliderProps {\n  start:() => void;\n  processHanlder: (arg: any) => any;\n  onchange: (arg0: any) => any;\n  currentVal:number;\n  refProgess:any\n}\n\n/**\n * \n * @param start 开始触摸事件\n * @param processHanlder move事件\n * @param onchange 触摸结束后事件\n * @param currentVal 参数值\n * @param refProgess ref实例 \n * @returns \n */\n\nconst SliderControl = ({\n  start,\n  processHanlder,\n  onchange,\n  currentVal,\n  refProgess\n}: SliderProps) => {\n\n  const onTouchStart: React.TouchEventHandler<HTMLDivElement> = useCallback(\n    (e) => {\n      const doms: any = refProgess.current;\n      sliderWidth = parseFloat(doms.getBoundingClientRect().width);\n      sliderOffsetLeft = parseFloat(doms.getBoundingClientRect().left);\n      const touchs = e.changedTouches[0];\n      startX = touchs.pageX;\n      startY = touchs.pageY;\n      isTouched = true;\n      isHorizontalMoved = false;\n      start();\n    },\n    [start]\n  );\n\n  const onTouchMove: React.TouchEventHandler<HTMLDivElement> = useCallback(\n    (e) => {\n      const touchs = e.changedTouches[0];\n      const currentX = touchs.pageX;\n      const currentY = touchs.pageY;\n      const diffX = Math.abs(currentX - startX);\n      const diffY = Math.abs(currentY - startY);\n      // 在第一次触发touchmove时 判断是左右滑还是上下滑\n      // 左右滑动时才是触动了滑杆的滑动 isHorizontalMoved = true;\n      if (isTouched) {\n        if (diffX * 0.8 > diffY) {\n          isHorizontalMoved = true;\n        }\n        isTouched = false;\n      }\n\n      const processPercent =\n        ((currentX - sliderOffsetLeft) / sliderWidth) * 100;\n\n      // 只有在左右滑动时 滑杆才产生变化;\n      if (isHorizontalMoved) {\n        processHanlder(processPercent);\n      }\n    },\n    [processHanlder]\n  );\n\n  const onTouchEnd = useCallback(() => {\n    if (isHorizontalMoved) {\n      onchange(currentVal);\n    } else {\n      // console.log('没有拖动不触发下发');\n    }\n  }, [currentVal, onchange]);\n\n  return {\n    onTouchStart: (e: any) => onTouchStart(e),\n    onTouchMove: (e: any) => onTouchMove(e),\n    onTouchEnd: () => onTouchEnd(),\n    onTouchCancel: () => onTouchEnd(),\n  };\n}\n\n\nexport default SliderControl;","import React from 'react';\nimport IOTNoPoleSlider from '../IOTNoPoleSlider';\nimport { IOTNoPoleSliderProps } from '../interface';\n\nconst props: IOTNoPoleSliderProps = {\n  type: 'number',\n  streamId: 'Word',\n  title: '洗涤时间',\n  icon: {\n    show: true,\n    value: 'insideicon-cu-1',\n  },\n  min: '1',\n  max: '20',\n  step: '5',\n  unitdesc: '',\n  curValue: '6',\n  unit: 'h',\n  disabled: false,\n  startHandler: (val: any) => { },\n  endHandler: () => { },\n  streamName: ''\n};\nexport default () => <IOTNoPoleSlider {...props} />;","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fengyanwei/Downloads/Git/iot-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBox } from '../../doc-comps/code-box';\nimport BasicDemo from './demo/1-demo-basic';\nimport BasicDemoCode from '!raw-loader!./demo/1-demo-basic.tsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"椭圆无极滑竿-数值型slider\"\n    }}>{`椭圆无极滑竿-数值型Slider`}</h1>\n    <p>{`控制区间值。`}</p>\n    <h2 {...{\n      \"id\": \"代码演示\"\n    }}>{`代码演示`}</h2>\n    <h3 {...{\n      \"id\": \"基本用法\"\n    }}>{`基本用法`}</h3>\n    <CodeBox code={BasicDemoCode} title=\"基本用法\" desc=\"使用kind控制Alert类型\" mdxType=\"CodeBox\">\n  <BasicDemo mdxType=\"BasicDemo\" />\n    </CodeBox>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default \"import React from 'react';\\nimport IOTNoPoleSlider from '../IOTNoPoleSlider';\\nimport { IOTNoPoleSliderProps } from '../interface';\\n\\nconst props: IOTNoPoleSliderProps = {\\n  type: 'number',\\n  streamId: 'Word',\\n  title: '洗涤时间',\\n  icon: {\\n    show: true,\\n    value: 'insideicon-cu-1',\\n  },\\n  min: '1',\\n  max: '20',\\n  step: '5',\\n  unitdesc: '',\\n  curValue: '6',\\n  unit: 'h',\\n  disabled: false,\\n  startHandler: (val: any) => { },\\n  endHandler: () => { },\\n  streamName: ''\\n};\\nexport default () => <IOTNoPoleSlider {...props} />;\";","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { dotInfoList } from \"../../sliderConfig\";\nimport SliderControl from \"../../SliderControl\";\nimport './fatSlider.less';\n\ninterface SliderProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  curValue: string | number;\n  onchange: (val: any) => void;\n  start: () => void;\n  min: number;\n  max: number;\n  step: number;\n  disabled: boolean;\n  barStyle?: 'line' | 'bar';\n  showHandleBtn: boolean;\n  move: (val: any) => void;\n  isStep?: boolean;\n  dotsData?: any;  /**\n                     * 滑杆下面的文字信息列表,有级时 以此来判断份几级\n                     * dots是一组json对象组成的数组;\n                     * 包含的字段: value、text、icon;\n                     * 例: [{value: 10, text: '低档', icon: model-cool},{value: 20, text: '中档',                    icon: model-cool}];\n                     * */\n}\n//  布局组件\nconst Slider = ({\n  leftIcon = 'insideicon-reduce',\n  rightIcon = 'insideicon-plus',\n  barStyle = 'bar',\n  curValue,\n  min,\n  max,\n  disabled,\n  onchange,\n  dotsData,\n  step,\n  start,\n  move,\n  isStep = true,\n  showHandleBtn = false,\n}: SliderProps) => {\n  const [progress, setProgress] = useState<string>('');\n\n  const [currentVal, setCurrentVal] = useState(0);\n  // const [domParent,setDomParent] = useState();\n  const refProgess = useRef(null);\n\n  useEffect(() => {\n    // console.log('Slider, useEffect, curValue', curValue);\n    if (curValue !== void 0) {\n      if (typeof curValue === 'string') {\n      if (Number.parseFloat(curValue) < min) {\n        setCurrentVal(min);\n        setProgress(`${min  }%`);\n        return;\n      } if (Number.parseFloat(curValue) > max) {\n        setCurrentVal(max);\n        setProgress(`${max  }%`);\n        return;\n      }\n      const processPercent = (Number.parseFloat(curValue) - min) * (100 / (max - min));\n      setProgress(`${processPercent  }%`);\n    }\n  }\n  }, [curValue, min, max]);\n\n\n\n  useEffect(() => {\n    if (isStep) return;\n    // value 与 this.currentValue 是否一致;\n    let isSame = true;\n    // 通过对比value 与 this.currentValue 是否一致;\n    isSame = curValue === currentVal;\n    // 如果不一致 或者dots产生了变化 执行更新方法;\n    if (!isSame) {\n      // 无级\n      if (isStep) {\n        if (curValue < min) {\n          setCurrentVal(min);\n          return;\n        } if (curValue > max) {\n          setCurrentVal(max);\n          return;\n        }\n        setProgress(JSON.stringify(((curValue as any) - min) * (100 / (max - min))));\n      } else {\n        let currentStepInd = 0;\n        for (const [index, elem] of (dotsData).entries()) {\n          if ((curValue as any) === JSON.stringify(elem.text)) {\n            currentStepInd = index;\n          }\n        }\n        setProgress(`${dotInfoList(dotsData)[currentStepInd]?.left  }%`);\n      }\n    }\n  }, [curValue, min, max, barStyle, isStep, currentVal, dotsData])\n\n  const setProcessPercent = useCallback(\n    (processPercent: number) => {\n      let currentValue: number = 0;\n      if (isStep) {\n        const valueDiff: number = max - min;\n        if (processPercent <= 0) {\n          processPercent = 0;\n          currentValue = min;\n        } else if (processPercent >= 100) {\n          processPercent = 100;\n          currentValue = max;\n        } else {\n          const s: number = (valueDiff * processPercent) / 100 + min;\n          currentValue = parseInt(s.toString(), 10);\n        }\n      }  // 有极\n      else {\n        // 步长百分比值(每级所占整个slide长度的百分比值);\n        const oneStepPercent = 100 / (dotsData.length - 1);\n        // 1是最小值\n        let currentStep = Math.round(processPercent / oneStepPercent) + 1;\n        if (currentStep < 1) {\n          currentStep = 1\n        }\n        if (currentStep > dotsData.length) {\n          currentStep = dotsData.length\n        }\n        processPercent = dotInfoList(dotsData)[currentStep - 1]?.left;\n        currentValue = dotsData[currentStep - 1].text;\n      }\n      move(currentValue);\n      // console.log(currentValue);\n      setCurrentVal(currentValue);\n      setProgress(`${processPercent  }%`);\n    },\n    [dotsData, isStep, max, min, move],\n  );\n\n  const SliderChildern = SliderControl({\n    start: () => { start() },\n    processHanlder: (processVal: any) => { setProcessPercent(processVal) },\n    onchange: (changVal: any) => { onchange(changVal) },\n    currentVal,\n    refProgess\n  });\n\n  const prefixCls = 'fatSlider';\n  return (\n    <div className={`${prefixCls} Slider`}>\n      {showHandleBtn ? (\n        <div\n          className={`icon icon-left ${leftIcon}`}\n          onClick={() => {\n            if (disabled) return;\n            const value = Number(curValue) - step < min ? min : Number(curValue) - step;\n            onchange(value);\n          }}\n        ></div>\n      ) : null}\n      <div className={`slider-bar slider-bar-${barStyle}`}>\n        <div className=\"slider-bar-inner\" ref={refProgess}></div>\n        <div className=\"progress\" style={{ width: progress }}>\n          <div\n            className=\"ball\"\n            {...SliderChildern}\n          ></div>\n          {/* <div className=\"progress-inner\">\n            \n          </div> */}\n        </div>\n      </div>\n      {showHandleBtn ? (\n        <div\n          className={`icon icon-right ${rightIcon}`}\n          onClick={() => {\n            if (disabled) return;\n            const value = Number(curValue) + step > max ? max : Number(curValue) + step;\n            onchange(value);\n          }}\n        ></div>\n      ) : null}\n\n      {disabled && <div className=\"disabled\"></div>}\n    </div>\n  );\n};\n\nexport default Slider;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { IOTNoPoleSliderProps } from './interface';\nimport Slider from './fatSlider/fatSlider';\nimport { dataSource } from \"../sliderConfig\";\nimport './style/index.less';\n\n\n\nconst prefixCls = 'iot-nopole-slider-out';\nconst IOTNoPoleSlider: React.FC<IOTNoPoleSliderProps> = ({\n  streamId,\n  streamName,\n  title,\n  subTitle,\n  icon,\n  min,\n  max,\n  step,\n  disabled = false,\n  unit = 'min',\n  unitdesc,\n  curValue,\n  leftIcon,\n  rightIcon,\n  startHandler = (val: any) => { },\n  endHandler = (val: any) => { },\n  ...rest\n}) => {\n  const [displayValue, setDisplayValue] = useState<string>('');\n\n  useEffect(() => {\n    setDisplayValue(curValue);\n\n  }, [curValue])\n\n  return (\n    <div className={prefixCls} {...rest}>\n      <div className='iot-time-slider'>\n        <div className='iot-time-slider-top'>\n          <div className='iot-time-slider-left'>\n            {\n              icon?.show && (\n                <div className=\"iot-time-slider-icon\">\n                  <span className={['iot-time-slider-icon-image', icon?.value ? icon.value : 'insideicon-cu-1'].join(' ')}></span>\n                </div>\n              )\n            }\n            <div className=\"iot-time-slider-title\" style={{ marginLeft: icon?.show ? '0' : '.2rem' }} >\n              <div className=\"iot-time-slider-main\" >{title}</div>\n            </div>\n            <div className='line'></div>\n            <div className='value-unit'>{displayValue}</div>\n          </div>\n        </div>\n        <div className=\"iot-time-slider-number\">\n          <div className='min-text'>{min}</div>\n          <Slider\n            min={Number.parseInt(min)}\n            max={Number.parseInt(max)}\n            step={Number.parseInt(step)}\n            showHandleBtn={false}\n            isStep={Number.parseFloat(step) === 1 &&(Math.round((Number.parseFloat(max) - Number.parseFloat(min)) / Number.parseFloat(step)) >50) }\n            curValue={displayValue}\n            dotsData={dataSource(min, max, step)}\n            disabled={false}\n            onchange={(val: any) => {\n              const item = {\n                streamId,\n                value: val,\n              };\n              endHandler(item);\n            }}\n            move={(val: any) => {\n              setDisplayValue(val);\n            }}\n            start={() => {\n              startHandler('start');\n            }}\n          ></Slider>\n          <div className='max-text'>{max}</div>\n        </div>\n        <div className=\"disabled-pangle\" style={{ display: `${disabled ? 'block' : 'none'}` }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default IOTNoPoleSlider;\n","export const dataSource = (min: string, max: string, step: string) => {\n  const minTemp: number = Number.parseFloat(min);\n  const maxTemp: number = Number.parseFloat(max);\n  const stepTemp: number = Number.parseFloat(step);\n  // 切割后的循环数\n  let num = 0;\n  // 数组 [{value: 10, text: '低档'}]\n  const dataList: any = [];\n  num = Math.round((maxTemp - minTemp) / stepTemp);\n  // 最大值距离循环后的最大值的差\n  // 5 % 2\n  //   // console.log(100 % 0.2) === 0.19999999999999446\n  const lastStep = maxTemp - (num * stepTemp + minTemp);\n  // 生成数组 [{value: 10, text: '低档'}]\n  for (let i = 0; i < (lastStep < 0 ? num : num + 1); i++) {\n    dataList.push({\n      value: i + 1,\n      // lastStep === 0说明和step值一样\n      text: ((stepTemp * 10) * i + minTemp * 10) / 10,\n    })\n  }\n  // lastStep !== 0 说明有余数，不取余数，操作小数不是很精确，新添加最大值到数组的最后一个\n  if (lastStep !== 0) {\n    dataList.push({\n      value: dataList.length + 1,\n      text: maxTemp,\n    })\n  }\n  //  // console.log(dataList)\n  return dataList\n}\n\n\nexport const dotInfoList = (dotsData: any[]) => {\n  const aInfoList = [];\n  const dotsLength = dotsData.length;\n  if (dotsLength > 0) {\n    const oneStepPercent = 100 / (dotsLength - 1);\n    for (let i = 0; i < dotsLength; i += 1) {\n      let aInfo: any = {\n        icon: '',\n      };\n      const hasIcon = !!dotsData[i].icon;\n      if (hasIcon) {\n        aInfo = { ...aInfo, icon: dotsData[i].icon,};\n      }\n      if (i === (dotsLength - 1)) {\n        aInfo = { ...aInfo, left: 100,};\n      } else {\n        const pos = oneStepPercent * i;\n        aInfo = { ...aInfo, left: pos,};\n      }\n      aInfo = { ...aInfo, text: dotsData[i].text,\n        value: dotsData[i].value,};\n      aInfoList.push(aInfo);\n    }\n  }\n  return aInfoList\n}"],"sourceRoot":""}