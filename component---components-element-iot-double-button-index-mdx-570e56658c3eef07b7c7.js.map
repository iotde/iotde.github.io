{"version":3,"sources":["webpack:///../components/element/IOTDoubleButton/LongPress.tsx","webpack:///../components/element/IOTDoubleButton/IOTDoubleButton.tsx","webpack:///../components/element/IOTDoubleButton/demo/1-demo-basic.tsx","webpack:///../components/element/IOTDoubleButton/index.mdx","webpack:///../components/element/IOTDoubleButton/demo/1-demo-basic.tsx?ec94"],"names":["useLongPress","onLongPress","onClick","stopLongPress","shouldPreventDefault","delay","useState","longPressTriggered","setLongPressTriggered","timeout","useRef","target","start","useCallback","event","addEventListener","preventDefault","passive","current","setTimeout","clear","shouldTriggerClick","clearTimeout","removeEventListener","onTouchStart","e","onTouchEnd","isTouchEvent","touches","length","IOTDoubleButton","subTitle","streamId","btnTitle","leftBtn","rightBtn","handler","val","rest","timer","setTimer","isNoStop","setIsNoStop","type","time","setInterval","useEffect","clearInterval","changeLeftHnadler","changeRightHnadler","className","props","title","value","show","icon","disabled","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","code","desc","isMDXComponent"],"mappings":"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","file":"component---components-element-iot-double-button-index-mdx-570e56658c3eef07b7c7.js","sourcesContent":["import { useCallback, useRef, useState } from \"react\";\n\n/**\n * \n * @param onLongPress 长按事件\n * @param onClick 点击事件\n * @param stopLongPress 长按事件结束状态\n * @param param2 \n * @returns \n */\n\nconst useLongPress = (\n    onLongPress: (arg0: any) => void,\n    onClick: () => any,\n    stopLongPress: () => any,\n    { shouldPreventDefault = true, delay = 300 } = {}\n) => {\n    const [longPressTriggered, setLongPressTriggered] = useState(false);\n    const timeout: any = useRef();\n    const target: any = useRef();\n\n    const start = useCallback(\n        event => {\n            if (shouldPreventDefault && event.target) {\n                event.target.addEventListener(\"touchend\", preventDefault, {\n                    passive: false\n                });\n                target.current = event.target;\n            }\n            timeout.current = setTimeout(() => {\n                onLongPress(event);\n                setLongPressTriggered(true);\n            }, delay);\n        },\n        [onLongPress, delay, shouldPreventDefault]\n    );\n\n    const clear = useCallback(\n        (event, shouldTriggerClick = true) => {\n            timeout.current && clearTimeout(timeout.current);\n            shouldTriggerClick && !longPressTriggered && onClick();\n            if (longPressTriggered) {\n                stopLongPress()\n            }\n            setLongPressTriggered(false);\n\n            if (shouldPreventDefault && target.current) {\n                target.current.removeEventListener(\"touchend\", preventDefault);\n            }\n        },\n        [shouldPreventDefault, onClick, longPressTriggered, stopLongPress]\n    );\n\n    return {\n        onTouchStart: (e: any) => start(e),\n        onTouchEnd: (e: any) => clear(e)\n    };\n};\n\nconst isTouchEvent = (event: any) => {\n    return \"touches\" in event;\n};\n\nconst preventDefault = (event: { touches: string | any[]; preventDefault: () => void; }) => {\n    if (!isTouchEvent(event)) return;\n\n    if (event.touches.length < 2 && event.preventDefault) {\n        event.preventDefault();\n    }\n};\n\nexport default useLongPress;","import React, { useState, useEffect } from 'react';\nimport useLongPress from \"./LongPress\";\nimport { iIOTElementDoubleButtonProps } from \"./interface\";\nimport './style/index.less';\n\nconst prefixCls = 'iot-element-double-button';\n\n\nconst IOTDoubleButton: React.FC<iIOTElementDoubleButtonProps> = ({\n  subTitle,\n  streamId,\n  btnTitle,\n  leftBtn, //按钮图标\n  rightBtn,\n  handler = (val: any) => { },\n  ...rest\n}) => {\n\n  const [timer, setTimer] = useState<any>(0);\n  const [isNoStop, setIsNoStop] = useState<boolean>(false); // 不停止长按\n\n  // 长按控制\n  const onLongPress = (type: string) => {\n    const time = setInterval(() => {\n      handler(type)\n    }, 500);\n    setTimer(time)\n  };\n\n  useEffect(() => {\n    if (!isNoStop && timer) {\n      clearInterval(timer);\n    }\n  }, [isNoStop, timer]);\n\n  // 左\n  const changeLeftHnadler = useLongPress(\n    () => { setIsNoStop(true); onLongPress('left') },\n    () => { handler('left') },\n    () => { setIsNoStop(false) });\n  // 右\n  const changeRightHnadler = useLongPress(\n    () => { setIsNoStop(true); onLongPress('right') },\n    () => { handler('right') },\n    () => { setIsNoStop(false) });\n\n  return (\n    <div className={prefixCls} {...rest}>\n      <div className='btn-box' {...changeLeftHnadler}>\n        <i className={`btns ${leftBtn ? leftBtn : 'insideicon-reduce'}`} />\n      </div>\n      <span className='btn-text'>{btnTitle}</span>\n      <div className='btn-box' {...changeRightHnadler}>\n        <i className={`btns ${leftBtn ? leftBtn : 'insideicon-plus'}`} />\n      </div>\n    </div>\n  )\n}\n\nexport default IOTDoubleButton;\n","import React from 'react';\nimport IOTDoubleButton from '../IOTDoubleButton';\nimport { iIOTElementDoubleButtonProps } from '../interface';\nconst handler = (val: any) => {\n  // console.log(val);\n}\nconst props: iIOTElementDoubleButtonProps = {\n  title: '功能名称',\n  subTitle: { value: '副标题', show: true },\n  icon: { value: 'insideicon-cu-1', show: true },\n  streamId: 'Power',\n  type: '',\n  handler: handler,\n  btnTitle:'音量',\n  leftBtn:'', //按钮图标\n  rightBtn:'',\n  disabled: false,\n};\nexport default () => <IOTDoubleButton {...props} />;","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fengyanwei/Downloads/Git/iot-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBox } from '../../doc-comps/code-box';\nimport BasicDemo from './demo/1-demo-basic';\nimport BasicDemoCode from '!raw-loader!./demo/1-demo-basic.tsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"按钮\"\n    }}>{`按钮`}</h1>\n    <p>{`双按钮点击、长按效果。`}</p>\n    <h2 {...{\n      \"id\": \"代码演示\"\n    }}>{`代码演示`}</h2>\n    <h3 {...{\n      \"id\": \"基本用法\"\n    }}>{`基本用法`}</h3>\n    <CodeBox code={BasicDemoCode} title=\"基本用法\" desc=\"使用kind控制Alert类型\" mdxType=\"CodeBox\">\n  <BasicDemo mdxType=\"BasicDemo\" />\n    </CodeBox>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default \"import React from 'react';\\nimport IOTDoubleButton from '../IOTDoubleButton';\\nimport { iIOTElementDoubleButtonProps } from '../interface';\\nconst handler = (val: any) => {\\n  // console.log(val);\\n}\\nconst props: iIOTElementDoubleButtonProps = {\\n  title: '功能名称',\\n  subTitle: { value: '副标题', show: true },\\n  icon: { value: 'insideicon-cu-1', show: true },\\n  streamId: 'Power',\\n  type: '',\\n  handler: handler,\\n  btnTitle:'音量',\\n  leftBtn:'', //按钮图标\\n  rightBtn:'',\\n  disabled: false,\\n};\\nexport default () => <IOTDoubleButton {...props} />;\";"],"sourceRoot":""}