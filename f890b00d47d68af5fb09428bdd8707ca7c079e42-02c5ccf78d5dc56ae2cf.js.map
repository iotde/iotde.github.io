{"version":3,"sources":["webpack:///../components/number/IOTTimeSlider/fatSlider/fatSlider.tsx","webpack:///../components/number/IOTTimeSlider/IOTTimeSlider.tsx","webpack:///../components/number/SliderControl.tsx","webpack:///../components/number/IOTTimeSlider/utils.ts","webpack:///../components/number/sliderConfig.tsx"],"names":["Slider","leftIcon","rightIcon","barStyle","curValue","min","max","disabled","onchange","dotsData","step","start","move","isStep","showHandleBtn","useState","progress","setProgress","currentVal","setCurrentVal","refProgess","useRef","useEffect","JSON","stringify","currentStepInd","entries","index","elem","text","dotInfoList","left","setProcessPercent","useCallback","processPercent","currentValue","parseInt","toString","oneStepPercent","length","currentStep","Math","round","SliderChildern","SliderControl","processHanlder","processVal","changVal","className","prefixCls","onClick","ref","style","width","IOTTimeSlider","streamId","title","streamName","icon","subTitle","timeConver","unit","unitdesc","startHandler","val","endHandler","rest","displayValue","setDisplayValue","value","formatTime","Number","show","join","marginLeft","descText","dataSource","onChange","display","sliderWidth","sliderOffsetLeft","startX","startY","isTouched","isHorizontalMoved","onTouchStart","e","doms","current","parseFloat","getBoundingClientRect","touchs","changedTouches","pageX","pageY","onTouchMove","currentX","currentY","diffX","abs","diffY","onTouchEnd","onTouchCancel","getSeconds","initTime","ss","getDisplayTime","type","hoursFlag","minutesFlag","secondsFlag","undefined","initSecond","res","floor","num","minTemp","maxTemp","stepTemp","dataList","lastStep","i","push","aInfoList","dotsLength","aInfo","pos"],"mappings":"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","file":"f890b00d47d68af5fb09428bdd8707ca7c079e42-02c5ccf78d5dc56ae2cf.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { dotInfoList } from \"../../sliderConfig\";\nimport SliderControl from \"../../SliderControl\";\nimport './fatSlider.less';\n\ninterface SliderProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  curValue: number;\n  onchange: (val: any) => void;\n  start: () => void;\n  min: number;\n  max: number;\n  step: number;\n  disabled: boolean;\n  barStyle?: 'line' | 'bar';\n  showHandleBtn: boolean;\n  move: (val: any) => void;\n  isStep?: boolean;\n  dotsData?: any;  /**\n                     * 滑杆下面的文字信息列表,有级时 以此来判断份几级\n                     * dots是一组json对象组成的数组;\n                     * 包含的字段: value、text、icon;\n                     * 例: [{value: 10, text: '低档', icon: model-cool},{value: 20, text: '中档',                    icon: model-cool}];\n                     * */\n}\n//  布局组件\nconst Slider = ({\n  leftIcon = 'insideicon-reduce',\n  rightIcon = 'insideicon-plus',\n  barStyle = 'bar',\n  curValue,\n  min,\n  max,\n  disabled,\n  onchange,\n  dotsData,\n  step,\n  start,\n  move,\n  isStep = true,\n  showHandleBtn = false,\n}: SliderProps) => {\n  const [progress, setProgress] = useState<string>('');\n\n  const [currentVal, setCurrentVal] = useState(0);\n  // const [domParent,setDomParent] = useState();\n  const refProgess = useRef(null);\n\n  useEffect(() => {\n    // console.log('Slider, useEffect, curValue', curValue);\n    if (curValue !== void 0) {\n      if (curValue < min) {\n        setCurrentVal(min);\n        setProgress(`${min  }%`);\n        return;\n      } if (curValue > max) {\n        setCurrentVal(max);\n        setProgress(`${max  }%`);\n        return;\n      }\n      const processPercent = (curValue - min) * (100 / (max - min));\n      setProgress(`${processPercent  }%`);\n    }\n  }, [curValue, min, max]);\n\n\n\n  useEffect(() => {\n    if (isStep) return;\n    // value 与 this.currentValue 是否一致;\n    let isSame = true;\n    // 通过对比value 与 this.currentValue 是否一致;\n    isSame = curValue === currentVal;\n    // 如果不一致 或者dots产生了变化 执行更新方法;\n    if (!isSame) {\n      // 无级\n      if (isStep) {\n        if (curValue < min) {\n          setCurrentVal(min);\n          return;\n        } if (curValue > max) {\n          setCurrentVal(max);\n          return;\n        }\n        setProgress(JSON.stringify(((curValue as any) - min) * (100 / (max - min))));\n      } else {\n        let currentStepInd = 0;\n        for (const [index, elem] of (dotsData).entries()) {\n          if ((curValue as any) === JSON.stringify(elem.text)) {\n            currentStepInd = index;\n          }\n        }\n        setProgress(`${dotInfoList(dotsData)[currentStepInd]?.left  }%`);\n      }\n    }\n  }, [curValue, min, max, barStyle, isStep, currentVal, dotsData])\n\n  const setProcessPercent = useCallback(\n    (processPercent: number) => {\n      let currentValue: number = 0;\n      if (isStep) {\n        const valueDiff: number = max - min;\n        if (processPercent <= 0) {\n          processPercent = 0;\n          currentValue = min;\n        } else if (processPercent >= 100) {\n          processPercent = 100;\n          currentValue = max;\n        } else {\n          const s: number = (valueDiff * processPercent) / 100 + min;\n          currentValue = parseInt(s.toString(), 10);\n        }\n      }  // 有极\n      else {\n        // 步长百分比值(每级所占整个slide长度的百分比值);\n        const oneStepPercent = 100 / (dotsData.length - 1);\n        // 1是最小值\n        let currentStep = Math.round(processPercent / oneStepPercent) + 1;\n        if (currentStep < 1) {\n          currentStep = 1\n        }\n        if (currentStep > dotsData.length) {\n          currentStep = dotsData.length\n        }\n        processPercent = dotInfoList(dotsData)[currentStep - 1]?.left;\n        currentValue = dotsData[currentStep - 1].text;\n      }\n      move(currentValue);\n      // console.log(currentValue);\n      setCurrentVal(currentValue);\n      setProgress(`${processPercent  }%`);\n    },\n    [dotsData, isStep, max, min, move],\n  );\n\n  const SliderChildern = SliderControl({\n    start: () => { start() },\n    processHanlder: (processVal: any) => { setProcessPercent(processVal) },\n    onchange: (changVal: any) => { onchange(changVal) },\n    currentVal,\n    refProgess\n  });\n\n  const prefixCls = 'fatSlider';\n  return (\n    <div className={`${prefixCls} Slider`}>\n      {showHandleBtn ? (\n        <div\n          className={`icon icon-left ${leftIcon}`}\n          onClick={() => {\n            if (disabled) return;\n            const value = curValue - step < min ? min : curValue - step;\n            onchange(value);\n          }}\n        ></div>\n      ) : null}\n      <div className={`slider-bar slider-bar-${barStyle}`}>\n        <div className=\"slider-bar-inner\" ref={refProgess}></div>\n        <div className=\"progress\" style={{ width: progress }}>\n          <div\n            className=\"ball\"\n            {...SliderChildern}\n          ></div>\n          {/* <div className=\"progress-inner\">\n            \n          </div> */}\n        </div>\n      </div>\n      {showHandleBtn ? (\n        <div\n          className={`icon icon-right ${rightIcon}`}\n          onClick={() => {\n            if (disabled) return;\n            const value = curValue + step > max ? max : curValue + step;\n            onchange(value);\n          }}\n        ></div>\n      ) : null}\n\n      {disabled && <div className=\"disabled\"></div>}\n    </div>\n  );\n};\n\nexport default Slider;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { DisplayHelpInfos, DisplayTimeType, IOTTimeSliderProps } from './interface';\nimport { formatTime } from './utils';\n\nimport Slider from './fatSlider/fatSlider';\nimport NormalIcon from '../../base/normalIcon';\nimport {dataSource} from \"../sliderConfig\";\nimport './style/index.less';\n\n\n\nconst prefixCls = 'iot-time-slider-out';\nconst IOTTimeSlider: React.FC<IOTTimeSliderProps> = ({\n  streamId,\n  streamName,\n  title,\n  subTitle,\n  icon,\n  min,\n  max,\n  step,\n  timeConver,\n  disabled = false,\n  unit = 'min',\n  unitdesc,\n  curValue,\n  leftIcon,\n  rightIcon,\n  startHandler = (val: any) => { },\n  endHandler = (val: any) => { },\n  ...rest\n}) => {\n  const [displayValue, setDisplayValue] = useState<string>('');\n  // const [displayHelpInfos, setDisplayHelpInfos] = useState<DisplayHelpInfos>({ minVal: Number(min), maxVal: Number(max), stepVal: Number(step), initValue: curValue, displayTimeType: 'mm:ss' });\n\n  // useEffect(() => {\n  //   const { hoursFlag, minutesFlag, secondsFlag } = timeConver;\n  //   const _max = Number.parseInt(max);\n  //   const _min = Number.parseInt(min);\n  //   const _step = Number.parseInt(step);\n  //   const _curValue = curValue;\n  //   const _displayHelpInfos: DisplayHelpInfos = { minVal: _min, maxVal: _max, stepVal: _step, initValue: _curValue, displayTimeType: 'mm:ss' };\n  //   // 展示精确到秒\n  //   if (secondsFlag) {\n  //     // 默认单位是分钟\n  //     if (unit === 'min') {\n  //       _displayHelpInfos.maxVal = _displayHelpInfos.maxVal * 60;\n  //       _displayHelpInfos.minVal = _displayHelpInfos.minVal * 60;\n  //       _displayHelpInfos.stepVal = _displayHelpInfos.stepVal * 60;\n  //       _displayHelpInfos.initValue = _displayHelpInfos.initValue * 60;\n  //     }\n  //     // 默认单位是小时\n  //     if (unit === 'h') {\n  //       _displayHelpInfos.maxVal = _displayHelpInfos.maxVal * 60 * 60;\n  //       _displayHelpInfos.minVal = _displayHelpInfos.minVal * 60 * 60;\n  //       _displayHelpInfos.stepVal = _displayHelpInfos.stepVal * 60 * 60;\n  //       _displayHelpInfos.initValue = _displayHelpInfos.initValue * 60 * 60;\n  //     }\n  //     // 展示格式设置\n  //     if (minutesFlag) {\n  //       // 展示为 时：分：秒格式\n  //       if (hoursFlag) {\n  //         _displayHelpInfos.displayTimeType = 'hh:mm:ss';\n\n  //         // 展示为 分：秒格式\n  //       } else {\n  //         _displayHelpInfos.displayTimeType = 'mm:ss';\n  //       }\n  //     } else {\n  //       _displayHelpInfos.displayTimeType = 'ss';\n  //     }\n  //     // 展示精确到分钟\n  //   } else if (minutesFlag) {\n  //     // 默认单位是小时\n  //     if (unit === 'h') {\n  //       _displayHelpInfos.maxVal = _displayHelpInfos.maxVal * 60;\n  //       _displayHelpInfos.minVal = _displayHelpInfos.minVal * 60;\n  //       _displayHelpInfos.stepVal = _displayHelpInfos.stepVal * 60;\n  //       _displayHelpInfos.initValue = _displayHelpInfos.initValue * 60;\n  //     }\n  //     // 默认单位是秒\n  //     if (unit === 's') {\n  //       _displayHelpInfos.maxVal = _displayHelpInfos.maxVal / 60;\n  //       _displayHelpInfos.minVal = _displayHelpInfos.minVal / 60;\n  //       _displayHelpInfos.stepVal = _displayHelpInfos.stepVal / 60;\n  //       _displayHelpInfos.initValue = _displayHelpInfos.initValue / 60;\n\n  //     }\n  //     // 展示格式设置\n  //     // 展示为 时：分格式\n  //     if (hoursFlag) {\n  //       _displayHelpInfos.displayTimeType = 'hh:mm';\n  //     } else {\n  //       _displayHelpInfos.displayTimeType = 'mm';\n  //     }\n  //     // 展示精确到小时\n  //   } else if (hoursFlag) {\n  //     // 默认单位是分钟\n  //     if (unit === 'min') {\n  //       _displayHelpInfos.maxVal = _displayHelpInfos.maxVal / 60;\n  //       _displayHelpInfos.minVal = _displayHelpInfos.minVal / 60;\n  //       _displayHelpInfos.stepVal = _displayHelpInfos.stepVal / 60;\n  //       _displayHelpInfos.initValue = _displayHelpInfos.initValue / 60;\n\n  //     }\n  //     // 默认单位是秒\n  //     if (unit === 's') {\n  //       _displayHelpInfos.maxVal = _displayHelpInfos.maxVal / (60 * 60);\n  //       _displayHelpInfos.minVal = _displayHelpInfos.minVal / (60 * 60);\n  //       _displayHelpInfos.stepVal = _displayHelpInfos.stepVal / (60 * 60);\n  //       _displayHelpInfos.initValue = _displayHelpInfos.initValue / (60 * 60);\n  //     }\n  //     _displayHelpInfos.displayTimeType = 'hh';\n  //   }\n  //   setDisplayHelpInfos({ ..._displayHelpInfos });\n  // }, [timeConver, step, max, min, curValue, unit]);\n\n\n\n  const onChange = (val: any) => {\n    const value = formatTime(val, unit, timeConver);\n    setDisplayValue(value);\n  };\n  useEffect(() => {\n    const value = formatTime(Number.parseInt(curValue), unit, timeConver);\n    setDisplayValue(value);\n\n  }, [curValue, timeConver])\n\n  return (\n    <div className={prefixCls} {...rest}>\n      <div className='iot-time-slider'>\n        <div className='iot-time-slider-top'>\n          <div className='iot-time-slider-left'>\n            {\n              icon?.show && (\n                <div className=\"iot-time-slider-icon\">\n                  <span className={['iot-time-slider-icon-image', icon?.value ? icon.value : 'insideicon-cu-1'].join(' ')}></span>\n                </div>\n              )\n            }\n            <div className=\"iot-time-slider-title\" style={{ marginLeft: icon?.show ? '0' : '.2rem' }} >\n              <div className=\"iot-time-slider-main\" >{title}</div>\n            </div>\n            <div className='line'></div>\n            <div className='value-unit'> {displayValue}\n              {timeConver.descText}</div>\n          </div>\n        </div>\n        <div className=\"iot-time-slider-number\">\n          <Slider\n            min={Number.parseInt(min)}\n            max={Number.parseInt(max)}\n            step={1}\n            showHandleBtn={false}\n            // isStep={Number.parseFloat(step) === 1 &&(Math.round((Number.parseFloat(max) - Number.parseFloat(min)) / Number.parseFloat(step)) >50) }\n            curValue={Number.parseInt(`${curValue}`)}\n            dotsData={dataSource(min, max, step)}\n            disabled={false}\n            onchange={(val: any) => {\n              const item = {\n                streamId,\n                value: val,\n              };\n              endHandler(item);\n            }}\n            move={(val: any) => {\n              onChange(val);\n            }}\n            start={() => {\n              startHandler('start');\n            }}\n          ></Slider>\n        </div>\n        <div className=\"disabled-pangle\" style={{ display: `${disabled ? 'block' : 'none'}` }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default IOTTimeSlider;\n","import { useCallback } from \"react\";\n\nlet sliderWidth: number;\nlet sliderOffsetLeft: number;\n// let touchs: any;\nlet startX: number;\nlet startY: number;\nlet isTouched: boolean;\nlet isHorizontalMoved: boolean;\n\n\ninterface SliderProps {\n  start:() => void;\n  processHanlder: (arg: any) => any;\n  onchange: (arg0: any) => any;\n  currentVal:number;\n  refProgess:any\n}\n\n/**\n * \n * @param start 开始触摸事件\n * @param processHanlder move事件\n * @param onchange 触摸结束后事件\n * @param currentVal 参数值\n * @param refProgess ref实例 \n * @returns \n */\n\nconst SliderControl = ({\n  start,\n  processHanlder,\n  onchange,\n  currentVal,\n  refProgess\n}: SliderProps) => {\n\n  const onTouchStart: React.TouchEventHandler<HTMLDivElement> = useCallback(\n    (e) => {\n      const doms: any = refProgess.current;\n      sliderWidth = parseFloat(doms.getBoundingClientRect().width);\n      sliderOffsetLeft = parseFloat(doms.getBoundingClientRect().left);\n      const touchs = e.changedTouches[0];\n      startX = touchs.pageX;\n      startY = touchs.pageY;\n      isTouched = true;\n      isHorizontalMoved = false;\n      start();\n    },\n    [start]\n  );\n\n  const onTouchMove: React.TouchEventHandler<HTMLDivElement> = useCallback(\n    (e) => {\n      const touchs = e.changedTouches[0];\n      const currentX = touchs.pageX;\n      const currentY = touchs.pageY;\n      const diffX = Math.abs(currentX - startX);\n      const diffY = Math.abs(currentY - startY);\n      // 在第一次触发touchmove时 判断是左右滑还是上下滑\n      // 左右滑动时才是触动了滑杆的滑动 isHorizontalMoved = true;\n      if (isTouched) {\n        if (diffX * 0.8 > diffY) {\n          isHorizontalMoved = true;\n        }\n        isTouched = false;\n      }\n\n      const processPercent =\n        ((currentX - sliderOffsetLeft) / sliderWidth) * 100;\n\n      // 只有在左右滑动时 滑杆才产生变化;\n      if (isHorizontalMoved) {\n        processHanlder(processPercent);\n      }\n    },\n    [processHanlder]\n  );\n\n  const onTouchEnd = useCallback(() => {\n    if (isHorizontalMoved) {\n      onchange(currentVal);\n    } else {\n      // console.log('没有拖动不触发下发');\n    }\n  }, [currentVal, onchange]);\n\n  return {\n    onTouchStart: (e: any) => onTouchStart(e),\n    onTouchMove: (e: any) => onTouchMove(e),\n    onTouchEnd: () => onTouchEnd(),\n    onTouchCancel: () => onTouchEnd(),\n  };\n}\n\n\nexport default SliderControl;","import { DisplayTimeType, TimeConver, UnitType } from './interface'\n/**\n * \n * @param initTime 初始时间 默认是分钟\n * @param unit 初始单位\n * @param type 要转换的时间格式 \"hh:mm:ss\" | \"hh:mm\" | \"mm:ss\" | 'hh' | \"mm\" | \"ss\"\n * @returns \n */\nexport const getSeconds = (initTime: number, unit: string) => {\n  let ss: number = 0;\n  switch (unit) {\n    case 'h':\n      ss = initTime * 60 * 60;\n      break;\n    case 'min':\n      ss = initTime * 60;\n      break;\n    case 's':\n      ss = initTime\n      break;\n    default:\n      break;\n  }\n  return ss\n}\n\nexport const getDisplayTime = (timeConver: TimeConver, unit: UnitType) => {\n  let type = '';\n  const { hoursFlag, minutesFlag, secondsFlag } = timeConver;\n  if (hoursFlag) {\n    type = 'h';\n  }\n  if (minutesFlag) {\n    type += 'min';\n  }\n  if (secondsFlag) {\n    type += 's';\n  }\n  if (type === '') {\n    type = unit\n  }\n  return type\n}\n\nexport const formatTime = (initTime: number, unit: UnitType, timeConver: TimeConver) => {\n  if (initTime === undefined) return '';\n  const initSecond = getSeconds(initTime, unit);\n  const displayTimeType = getDisplayTime(timeConver, unit);\n  let res = '';\n  let hour: number = 0;\n  let mins: number = 0;\n  let secs: number = 0;\n\n  switch (displayTimeType) {\n    case 'h':\n      res = `${Math.round(initSecond / 3600 * 100) / 100}小时`;\n      break;\n    case 'min':\n      res = `${Math.round(initSecond / 60 * 100) / 100}分钟`;\n      break;\n    case 's':\n      res = `${initSecond}秒`;\n      break;\n    case 'mins':\n      mins = Math.floor(initSecond / 60);\n      secs = initSecond % 60;\n      res = mins + '分' + secs + '秒';\n      break;\n    case 'hmins':\n      hour = Math.floor(initSecond / 3600);\n      mins = Math.floor(initSecond % 3600 / 60);\n      secs = initSecond % 3600 % 60;\n      res = hour + \"时\" + mins + '分' + secs + '秒';\n      break;\n    case 'hmin':\n      hour = Math.floor(initSecond / 3600);\n      mins = Math.round(initSecond % 3600 / 60 * 100) / 100;\n      res = hour + \"时\" + mins + '分';\n      break;\n    default:\n      break;\n  }\n  return res;\n}\n\n\n\n\n\n","export const dataSource = (min: string, max: string, step: string) => {\n  const minTemp: number = Number.parseFloat(min);\n  const maxTemp: number = Number.parseFloat(max);\n  const stepTemp: number = Number.parseFloat(step);\n  // 切割后的循环数\n  let num = 0;\n  // 数组 [{value: 10, text: '低档'}]\n  const dataList: any = [];\n  num = Math.round((maxTemp - minTemp) / stepTemp);\n  // 最大值距离循环后的最大值的差\n  // 5 % 2\n  //   // console.log(100 % 0.2) === 0.19999999999999446\n  const lastStep = maxTemp - (num * stepTemp + minTemp);\n  // 生成数组 [{value: 10, text: '低档'}]\n  for (let i = 0; i < (lastStep < 0 ? num : num + 1); i++) {\n    dataList.push({\n      value: i + 1,\n      // lastStep === 0说明和step值一样\n      text: ((stepTemp * 10) * i + minTemp * 10) / 10,\n    })\n  }\n  // lastStep !== 0 说明有余数，不取余数，操作小数不是很精确，新添加最大值到数组的最后一个\n  if (lastStep !== 0) {\n    dataList.push({\n      value: dataList.length + 1,\n      text: maxTemp,\n    })\n  }\n  //  // console.log(dataList)\n  return dataList\n}\n\n\nexport const dotInfoList = (dotsData: any[]) => {\n  const aInfoList = [];\n  const dotsLength = dotsData.length;\n  if (dotsLength > 0) {\n    const oneStepPercent = 100 / (dotsLength - 1);\n    for (let i = 0; i < dotsLength; i += 1) {\n      let aInfo: any = {\n        icon: '',\n      };\n      const hasIcon = !!dotsData[i].icon;\n      if (hasIcon) {\n        aInfo = { ...aInfo, icon: dotsData[i].icon,};\n      }\n      if (i === (dotsLength - 1)) {\n        aInfo = { ...aInfo, left: 100,};\n      } else {\n        const pos = oneStepPercent * i;\n        aInfo = { ...aInfo, left: pos,};\n      }\n      aInfo = { ...aInfo, text: dotsData[i].text,\n        value: dotsData[i].value,};\n      aInfoList.push(aInfo);\n    }\n  }\n  return aInfoList\n}"],"sourceRoot":""}