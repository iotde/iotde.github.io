{"version":3,"sources":["webpack:///../components/number/SliderControl.tsx","webpack:///../components/number/IOTNumberSlider/Slider/Slider.tsx","webpack:///../components/number/IOTNumberSlider/IOTNumberSlider.tsx","webpack:///../components/number/IOTNumberSlider/demo/1-demo-basic.tsx","webpack:///../components/number/IOTNumberSlider/index.mdx","webpack:///../components/number/IOTNumberSlider/demo/1-demo-basic.tsx?567c","webpack:///../components/number/sliderConfig.tsx"],"names":["sliderWidth","sliderOffsetLeft","startX","startY","isTouched","isHorizontalMoved","SliderControl","start","processHanlder","onchange","currentVal","refProgess","onTouchStart","useCallback","e","doms","current","parseFloat","getBoundingClientRect","width","left","touchs","changedTouches","pageX","pageY","onTouchMove","currentX","currentY","diffX","Math","abs","diffY","onTouchEnd","onTouchCancel","Slider","leftIcon","rightIcon","barStyle","curValue","min","max","disabled","dotsData","step","move","isStep","showHandleBtn","useState","progress","setProgress","setCurrentVal","useRef","useEffect","Number","processPercent","setProcessPercent","currentValue","s","parseInt","toString","oneStepPercent","length","currentStep","round","dotInfoList","text","JSON","stringify","currentStepInd","entries","index","elem","SliderChildern","processVal","changVal","className","onClick","addValue","stepTemp","stepTemp1","ref","style","IOTNumberSlider","streamId","iconLeft","title","subTitle","streamName","type","icon","iconRight","unit","unitdesc","startHandler","endHandler","val","rest","setcurrentValue","dataSource","value","props","show","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","code","desc","isMDXComponent","num","minTemp","maxTemp","dataList","lastStep","i","push","aInfoList","dotsLength","aInfo","pos"],"mappings":"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","file":"component---components-number-iot-number-slider-index-mdx-b965c60f216e9f4166a6.js","sourcesContent":["import { useCallback } from \"react\";\n\nlet sliderWidth: number;\nlet sliderOffsetLeft: number;\n// let touchs: any;\nlet startX: number;\nlet startY: number;\nlet isTouched: boolean;\nlet isHorizontalMoved: boolean;\n\n\ninterface SliderProps {\n  start:() => void;\n  processHanlder: (arg: any) => any;\n  onchange: (arg0: any) => any;\n  currentVal:number;\n  refProgess:any\n}\n\n/**\n * \n * @param start 开始触摸事件\n * @param processHanlder move事件\n * @param onchange 触摸结束后事件\n * @param currentVal 参数值\n * @param refProgess ref实例 \n * @returns \n */\n\nconst SliderControl = ({\n  start,\n  processHanlder,\n  onchange,\n  currentVal,\n  refProgess\n}: SliderProps) => {\n\n  const onTouchStart: React.TouchEventHandler<HTMLDivElement> = useCallback(\n    (e) => {\n      const doms: any = refProgess.current;\n      sliderWidth = parseFloat(doms.getBoundingClientRect().width);\n      sliderOffsetLeft = parseFloat(doms.getBoundingClientRect().left);\n      const touchs = e.changedTouches[0];\n      startX = touchs.pageX;\n      startY = touchs.pageY;\n      isTouched = true;\n      isHorizontalMoved = false;\n      start();\n    },\n    [start]\n  );\n\n  const onTouchMove: React.TouchEventHandler<HTMLDivElement> = useCallback(\n    (e) => {\n      const touchs = e.changedTouches[0];\n      const currentX = touchs.pageX;\n      const currentY = touchs.pageY;\n      const diffX = Math.abs(currentX - startX);\n      const diffY = Math.abs(currentY - startY);\n      // 在第一次触发touchmove时 判断是左右滑还是上下滑\n      // 左右滑动时才是触动了滑杆的滑动 isHorizontalMoved = true;\n      if (isTouched) {\n        if (diffX * 0.8 > diffY) {\n          isHorizontalMoved = true;\n        }\n        isTouched = false;\n      }\n\n      const processPercent =\n        ((currentX - sliderOffsetLeft) / sliderWidth) * 100;\n\n      // 只有在左右滑动时 滑杆才产生变化;\n      if (isHorizontalMoved) {\n        processHanlder(processPercent);\n      }\n    },\n    [processHanlder]\n  );\n\n  const onTouchEnd = useCallback(() => {\n    if (isHorizontalMoved) {\n      onchange(currentVal);\n    } else {\n      // console.log('没有拖动不触发下发');\n    }\n  }, [currentVal, onchange]);\n\n  return {\n    onTouchStart: (e: any) => onTouchStart(e),\n    onTouchMove: (e: any) => onTouchMove(e),\n    onTouchEnd: () => onTouchEnd(),\n    onTouchCancel: () => onTouchEnd(),\n  };\n}\n\n\nexport default SliderControl;","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { dotInfoList } from \"../../sliderConfig\";\nimport SliderControl from \"../../SliderControl\";\nimport './Slider.less';\n\ninterface SliderProps {\n  leftIcon?: string;\n  rightIcon?: string;\n  curValue: string | number;\n  onchange: (val: any) => void;\n  start: () => void;\n  min: number;\n  max: number;\n  step: number;\n  disabled: boolean;\n  barStyle?: 'line' | 'bar';\n  showHandleBtn: boolean;\n  bottomNumber?: boolean;\n  move: (val: any) => void;\n  isStep?: boolean;\n  dotsData?: any;  /**\n                     * 滑杆下面的文字信息列表,有级时 以此来判断份几级\n                     * dots是一组json对象组成的数组;\n                     * 包含的字段: value、text、icon;\n                     * 例: [{value: 10, text: '低档', icon: model-cool},{value: 20, text: '中档',                    icon: model-cool}];\n                     **/\n}\n//  布局组件\nconst Slider = ({\n  leftIcon = \"insideicon-reduce\",\n  rightIcon = \"insideicon-plus\",\n  barStyle = 'line',\n  curValue,\n  min,\n  max,\n  disabled,\n  onchange,\n  dotsData,\n  step,\n  start,\n  move,\n  isStep = true,\n  showHandleBtn = true,\n}: SliderProps) => {\n  const [progress, setProgress] = useState<string>('');\n  // const [dotsData, setDotsData] = useState<any[]>([]);\n  const [aInfos, setAInfos] = useState<any[]>([]);\n  const [currentVal, setCurrentVal] = useState(0);\n\n  // const [domParent,setDomParent] = useState();\n  const refProgess = useRef(null);\n\n  useEffect(() => {\n    // console.log('Slider, useEffect, curValue', curValue);\n    if (curValue !== void 0) {\n      if (typeof curValue === 'string') {\n        if (Number.parseFloat(curValue) < min) {\n          setCurrentVal(min);\n          setProgress(0 + '%');\n\n          return;\n        } else if (Number.parseFloat(curValue) > max) {\n          setCurrentVal(max);\n          setProgress(100 + '%');\n\n          return;\n        }\n        let processPercent = (Number.parseFloat(curValue) - min) * (100 / (max - min));\n\n        setProgress(processPercent + '%');\n      }\n    }\n  }, [curValue, min, max, barStyle]);\n\n  const setProcessPercent = useCallback(\n    (processPercent: number) => {\n      let currentValue: number = 0;\n      // 无极\n      if (isStep) {\n        const valueDiff: number = max - min;\n        if (processPercent <= 0) {\n          processPercent = 0;\n          currentValue = min;\n        } else if (processPercent >= 100) {\n          processPercent = 100;\n          currentValue = max;\n        } else {\n          const s: number = (valueDiff * processPercent) / 100 + min;\n          currentValue = Number.parseInt(s.toString());\n        }\n      }  //有极\n      else {\n        // 步长百分比值(每级所占整个slide长度的百分比值);\n        const oneStepPercent = 100 / (dotsData.length - 1);\n        // 1是最小值\n        let currentStep = Math.round(processPercent / oneStepPercent) + 1;\n        if (currentStep < 1) {\n          currentStep = 1\n        }\n        if (currentStep > dotsData.length) {\n          currentStep = dotsData.length\n        }\n        processPercent = dotInfoList(dotsData)[currentStep - 1]?.left;\n        currentValue = dotsData[currentStep - 1].text;\n      }\n      move(currentValue);\n      // // console.log(currentValue);\n      setCurrentVal(currentValue);\n      setProgress(processPercent + '%');\n    },\n    [max, min]\n  );\n\n\n  useEffect(() => {\n    if (isStep) return;\n    // value 与 this.currentValue 是否一致;\n    let isSame = true;\n    // 通过对比value 与 this.currentValue 是否一致;\n    isSame = curValue === currentVal;\n    // 如果不一致 或者dots产生了变化 执行更新方法;\n    if (!isSame) {\n      // 无级\n      if (isStep) {\n        if (curValue < min) {\n          setCurrentVal(min);\n          return;\n        } else if (curValue > max) {\n          setCurrentVal(max);\n          return;\n        }\n        setProgress(JSON.stringify(((curValue as any) - min) * (100 / (max - min))));\n      } else {\n        let currentStepInd = 0;\n        for (const [index, elem] of (dotsData).entries()) {\n          if ((curValue as any) === JSON.stringify(elem.text)) {\n            currentStepInd = index;\n          }\n        }\n        setProgress(dotInfoList(dotsData)[currentStepInd]?.left + '%');\n      }\n    }\n  }, [curValue, min, max, barStyle, isStep])\n\n  const SliderChildern = SliderControl({\n    start: () => { start() },\n    processHanlder: (processVal: any) => { setProcessPercent(processVal) },\n    onchange: (changVal: any) => { onchange(changVal) },\n    currentVal,\n    refProgess\n  });\n\n  return (\n    <div className=\"Slider\">\n      {showHandleBtn ? (\n        <div\n          className={`icon icon-left ${leftIcon}`}\n          onClick={() => {\n            if (disabled) return;\n            let addValue = 0;\n            // 无极\n            if (isStep) {\n              addValue = Number(curValue) * 10 - step * 10;\n            } else {\n              // 有极 最后一项和倒数第二项差\n              const stepTemp = dotsData[dotsData.length - 1].text - dotsData[dotsData.length - 2].text;\n              // ===0 说明整个数组等分取step\n              const stepTemp1 = stepTemp !== 0 ? stepTemp : step\n              // Number(curValue) === dotsData[dotsData.length - 1].text 是最后一个，取差值，不是取step\n              addValue = Number(curValue) * 10 - (Number(curValue) === dotsData[dotsData.length - 1].text ? stepTemp1 : step) * 10;\n            }\n            const value =\n              addValue / 10 < min ? min : addValue / 10;\n            onchange(value);\n          }}\n        ></div>\n      ) : (\n        // <div\n        //   className={`icon icon-number-left`}\n        // >{min}</div>\n        <></>\n      )}\n\n      <div className={`slider-bar`}>\n        <div className=\"slider-bar-inner\" ref={refProgess}>\n          <div className=\"progress\" style={{ width: progress }}>\n            <div\n              className=\"ball\"\n              {...SliderChildern}\n            ></div>\n          </div>\n          {\n            showHandleBtn && (<div className=\"min-max\">\n              <div className=\"min\">{min}</div>\n              <div className=\"max\">{max}</div>\n            </div>)\n          }\n\n        </div>\n      </div>\n      {showHandleBtn ? (\n        <div\n          className={`icon icon-right ${rightIcon}`}\n          onClick={() => {\n            if (disabled) return;\n            const addValue = Number(curValue) * 10 + step * 10;\n            const value =\n              addValue / 10 > max ? max : addValue / 10;\n            onchange(value);\n          }}\n        ></div>\n      ) : (\n        // <div\n        //   className={`icon icon-number-right`}\n        // >{max}</div>\n        <></>\n      )}\n\n      {disabled && <div className=\"disabled\"></div>}\n    </div>\n  );\n};\n\nexport default Slider;\n","import React, { useEffect, useState } from 'react';\nimport { IOTNumberSliderProps } from \"./interface\";\nimport Slider from './Slider/Slider';\nimport {dataSource} from \"../sliderConfig\";\nimport './style/index.less';\n\nconst prefixCls = 'iot-number-slider-out';\nconst IOTNumberSlider: React.FC<IOTNumberSliderProps> = (\n  {\n    streamId,\n    title,\n    subTitle,\n    streamName,\n    type,\n    icon,\n    iconLeft,\n    iconRight,\n    min,\n    max,\n    step,\n    unit,\n    disabled = false,\n    unitdesc,\n    curValue,\n    startHandler = (val: any) => { },\n    endHandler = (val: any) => { },\n    ...rest\n  }\n) => {\n\n  const [currentValue, setcurrentValue] = useState(curValue);\n\n  useEffect(() => {\n    setcurrentValue(curValue);\n  }, [curValue])\n\n  return (\n    <div className={prefixCls} {...rest}>\n      <div className='volume-icon-box'>\n        <i className={`volume-icon volume-icon-left ${iconLeft ? iconLeft : 'insideicon-zuixiao'} `} />\n      </div>\n\n      <Slider\n        min={Number.parseFloat(min)}\n        max={Number.parseFloat(max)}\n        step={Number.parseFloat(step)}\n        showHandleBtn={false}\n        curValue={currentValue+''}\n        isStep={Number.parseFloat(step) === 1 &&(Math.round((Number.parseFloat(max) - Number.parseFloat(min)) / Number.parseFloat(step)) >50) }\n        disabled={false}\n        dotsData={dataSource(min, max, step)}\n        onchange={(val: any) => {\n          const item = {\n            streamId,\n            value: val,\n          };\n          endHandler(item);\n        }}\n        move={(val: any) => {\n          setcurrentValue(val);\n        }}\n        start={() => {\n        }}\n      ></Slider>\n      <div className='volume-icon-box'>\n        <i className={`volume-icon volume-icon-right ${iconRight ? iconRight : 'insideicon-zuida'}`} />\n      </div>\n\n    </div>\n  )\n}\n\nexport default IOTNumberSlider;","import React from 'react';\nimport IOTNumberSlider from '../IOTNumberSlider';\nimport { IOTNumberSliderProps } from '../interface';\n\nconst props: IOTNumberSliderProps = {\n  type: 'number',\n  streamId: 'Volume',\n  title: '温度',\n  icon: {\n    show: true,\n    value: 'insideicon-cu-1',\n  },\n  iconLeft: 'insideicon-zuixiao',\n  iconRight: 'insideicon-zuida',\n  min: '0',\n  max: '100',\n  step: '0.5',\n  unit: '°C',\n  disabled: false,\n  unitdesc: '摄氏度',\n  curValue: '',\n  startHandler: (val: any) => { },\n  endHandler: (val: any) => {  }\n};\nexport default () => <IOTNumberSlider {...props} />;","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fengyanwei/Downloads/Git/iot-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBox } from '../../doc-comps/code-box';\nimport BasicDemo from './demo/1-demo-basic';\nimport BasicDemoCode from '!raw-loader!./demo/1-demo-basic.tsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"无极滑竿-数值型-slider\"\n    }}>{`无极滑竿-数值型-slider`}</h1>\n    <p>{`控制区间值。`}</p>\n    <h2 {...{\n      \"id\": \"代码演示\"\n    }}>{`代码演示`}</h2>\n    <h3 {...{\n      \"id\": \"基本用法\"\n    }}>{`基本用法`}</h3>\n    <CodeBox code={BasicDemoCode} title=\"基本用法\" desc=\"使用kind控制Alert类型\" mdxType=\"CodeBox\">\n  <BasicDemo mdxType=\"BasicDemo\" />\n    </CodeBox>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default \"import React from 'react';\\nimport IOTNumberSlider from '../IOTNumberSlider';\\nimport { IOTNumberSliderProps } from '../interface';\\n\\nconst props: IOTNumberSliderProps = {\\n  type: 'number',\\n  streamId: 'Volume',\\n  title: '温度',\\n  icon: {\\n    show: true,\\n    value: 'insideicon-cu-1',\\n  },\\n  iconLeft: 'insideicon-zuixiao',\\n  iconRight: 'insideicon-zuida',\\n  min: '0',\\n  max: '100',\\n  step: '0.5',\\n  unit: '°C',\\n  disabled: false,\\n  unitdesc: '摄氏度',\\n  curValue: '',\\n  startHandler: (val: any) => { },\\n  endHandler: (val: any) => {  }\\n};\\nexport default () => <IOTNumberSlider {...props} />;\";","export const dataSource = (min: string, max: string, step: string) => {\n  const minTemp: number = Number.parseFloat(min);\n  const maxTemp: number = Number.parseFloat(max);\n  const stepTemp: number = Number.parseFloat(step);\n  // 切割后的循环数\n  let num = 0;\n  // 数组 [{value: 10, text: '低档'}]\n  const dataList: any = [];\n  num = Math.round((maxTemp - minTemp) / stepTemp);\n  // 最大值距离循环后的最大值的差\n  // 5 % 2\n  //   // console.log(100 % 0.2) === 0.19999999999999446\n  const lastStep = maxTemp - (num * stepTemp + minTemp);\n  // 生成数组 [{value: 10, text: '低档'}]\n  for (let i = 0; i < (lastStep < 0 ? num : num + 1); i++) {\n    dataList.push({\n      value: i + 1,\n      // lastStep === 0说明和step值一样\n      text: ((stepTemp * 10) * i + minTemp * 10) / 10,\n    })\n  }\n  // lastStep !== 0 说明有余数，不取余数，操作小数不是很精确，新添加最大值到数组的最后一个\n  if (lastStep !== 0) {\n    dataList.push({\n      value: dataList.length + 1,\n      text: maxTemp,\n    })\n  }\n  //  // console.log(dataList)\n  return dataList\n}\n\n\nexport const dotInfoList = (dotsData: any[]) => {\n  const aInfoList = [];\n  const dotsLength = dotsData.length;\n  if (dotsLength > 0) {\n    const oneStepPercent = 100 / (dotsLength - 1);\n    for (let i = 0; i < dotsLength; i += 1) {\n      let aInfo: any = {\n        icon: '',\n      };\n      const hasIcon = !!dotsData[i].icon;\n      if (hasIcon) {\n        aInfo = { ...aInfo, icon: dotsData[i].icon,};\n      }\n      if (i === (dotsLength - 1)) {\n        aInfo = { ...aInfo, left: 100,};\n      } else {\n        const pos = oneStepPercent * i;\n        aInfo = { ...aInfo, left: pos,};\n      }\n      aInfo = { ...aInfo, text: dotsData[i].text,\n        value: dotsData[i].value,};\n      aInfoList.push(aInfo);\n    }\n  }\n  return aInfoList\n}"],"sourceRoot":""}